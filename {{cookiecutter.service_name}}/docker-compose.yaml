x-webapp-image: &webapp-image
  image: "{{cookiecutter.service_name}}:latest"
  build:
    context: "./"
    dockerfile: "./docker/dev.Dockerfile"
  volumes:
      # Map the app internals so we can develop in the container environment
    - "./alembic:/home/app_user/app/alembic"
    - "./configs:/home/app_user/app/configs"
    - "./src:/home/app_user/app/src"
    - "./tests:/home/app_user/app/tests"
    - "./.flake8:/home/app_user/app/.flake8"
    - "./mypy.ini:/home/app_user/app/mypy.ini"
    - "./pyproject.toml:/home/app_user/app/pyproject.toml"

x-env: &x-env
  environment:
    APPLICATION_ENV: "container_dev"


x-test-package: &test-dependencies
  <<: [*webapp-image, *x-env]

version: "3.9"
services:
  postgres:
    image: "postgres:13"
    healthcheck:
      test: ["CMD", "pg_isready", "--username", "postgres"]
      interval: "10s"
      timeout: "10s"
      start_period: "5s"
      retries: 10
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "admin"

  migrate:
    <<: *test-dependencies
    entrypoint: ["alembic", "upgrade", "head"]
    depends_on:
      postgres:
        condition: "service_healthy"

  autogenerate_migration:
    <<: *test-dependencies
    entrypoint: ["alembic", "revision", "--autogenerate", "-m"]
    depends_on:
      migrate:
        condition: "service_completed_successfully"
      postgres:
        condition: "service_healthy"

  tests:
    <<: *test-dependencies
    # Tests need to run against latest persistence
    depends_on:
      migrate:
        condition: "service_completed_successfully"
    entrypoint: ["pytest", "--cov", "-p", "no:cacheprovider"]

  safety:
    <<: *test-dependencies
    entrypoint: ["safety", "check"]

  lint:
    <<: *test-dependencies
    entrypoint: ["flake8", "src", "tests"]

  black:
    <<: *test-dependencies
    entrypoint: ["black", "--check", "--diff", "tests"]

  typecheck:
    <<: *test-dependencies
    entrypoint: ["mypy", "src", "tests", "alembic"]

  local_pipeline:
    # A helper to run the CI pipeline locally.
    # Runs every step and checks that they've successfully completed
    #
    # Unfortunately, does not output logs on startup, so you would need to run:
    # `docker-compose logs -f` to see the execution logs
    <<: *test-dependencies
    entrypoint: ["true"]  # a NOOP for shell
    depends_on:
      lint:
        condition: "service_completed_successfully"
      black:
        condition: "service_completed_successfully"
      typecheck:
        condition: "service_completed_successfully"
      safety:
        condition: "service_completed_successfully"
      tests:
        condition: "service_completed_successfully"
